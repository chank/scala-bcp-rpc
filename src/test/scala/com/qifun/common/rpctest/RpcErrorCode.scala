// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: RpcErrorCode.proto

package com.qifun.common.rpcTest

object RpcTestErrorCodes extends net.sandrogrzicic.scalabuff.Enum {
	sealed trait EnumVal extends Value
	val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

	val ErrorOne = new EnumVal { val name = "ErrorOne"; val id = 1 }
	val ErrorTwo = new EnumVal { val name = "ErrorTwo"; val id = 2 }

	val ErrorOne_VALUE = 1
	val ErrorTwo_VALUE = 2

	def valueOf(id: Int) = id match {
		case 1 => ErrorOne
		case 2 => ErrorTwo
		case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
	}
	val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
		def findValueByNumber(id: Int): EnumVal = valueOf(id)
	}
}
final case class RpcTestException (
	`code`: Option[RpcTestErrorCodes.EnumVal] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[RpcTestException]
	with net.sandrogrzicic.scalabuff.Parser[RpcTestException] {

	def setCode(_f: RpcTestErrorCodes.EnumVal) = copy(`code` = Some(_f))

	def clearCode = copy(`code` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		if (`code`.isDefined) output.writeEnum(1, `code`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		if (`code`.isDefined) __size += computeEnumSize(1, `code`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpcTestException = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __code: Option[RpcTestErrorCodes.EnumVal] = `code`

		def __newMerged = RpcTestException(
			__code
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __code = Some(RpcTestErrorCodes.valueOf(in.readEnum()))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: RpcTestException) = {
		RpcTestException(
			m.`code`.orElse(`code`)
		)
	}

	def getDefaultInstanceForType = RpcTestException.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpcTestException {
	@beans.BeanProperty val defaultInstance = new RpcTestException()

	def parseFrom(data: Array[Byte]): RpcTestException = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): RpcTestException = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): RpcTestException = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): RpcTestException = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[RpcTestException] = defaultInstance.mergeDelimitedFromStream(stream)

	val CODE_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: RpcTestException) = defaultInstance.mergeFrom(prototype)

}

object RpcErrorCode {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "RpcTestException" -> (bytes ⇒ RpcTestException.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}
